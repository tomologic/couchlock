// Code generated by go-bindata.
// sources:
// data/designs/locks.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDesignsLocksJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x51\xc1\x4e\x83\x40\x10\xbd\xf7\x2b\x46\x0e\x05\x12\xc4\x78\xa5\xe1\xa4\x27\x63\xda\x43\x7b\x23\x8d\xd9\xb2\x53\xb2\x5a\x16\x0a\xbb\xad\x0d\xd9\x7f\x77\x66\xa9\xb5\x1e\x8c\x7a\x81\xd9\x79\xf3\xe6\xbd\x99\x19\x26\x00\xc1\x8b\x92\x41\x46\x3f\x89\xbd\xaa\xf4\xdd\xae\x29\xdf\xfa\x20\x61\x64\x27\x74\x65\x45\x85\x0c\xbf\x8a\x83\xe8\xcb\x4e\xb5\x66\xc4\x0e\x0a\x8f\x3d\x01\xdc\x82\x9e\x7b\x8b\x16\x2f\x4f\x4a\xd4\xa2\x65\xda\xd6\xea\xd2\xa8\x46\x47\xb2\x29\x63\x18\x40\x6d\x81\xc3\x74\x75\x6a\x11\xf2\x1c\x42\x96\x0b\x61\x3a\x85\xa8\x08\x7d\x93\x30\x19\x93\x28\xc3\x75\xaa\xb4\xc4\xf7\xc5\xd6\x53\x96\x46\x18\xdb\xc7\x70\x93\xc3\xed\x7d\xcc\xcd\xb0\x56\x26\x2a\x18\x7b\x26\x42\x02\x1c\x3d\x74\x28\x0c\xca\xb5\x7f\xc5\x33\x70\x2e\xf0\x96\x1c\x7d\x9d\x77\x6e\x5b\x49\x15\x57\xde\x4b\x4f\xb9\x76\xeb\x3d\x26\xd0\xe1\x9e\x65\x0e\xa2\x83\x0d\xe4\xf0\xb4\x5c\xcc\xd3\x56\x74\x3d\x46\x84\xa4\x9b\x46\x9e\x48\x80\x51\xaa\x26\x7c\xa0\x4d\x66\x4c\x4a\xad\x55\x32\x01\x9e\x31\x3b\x4f\x98\x00\x5b\xcc\x60\x53\x84\x1c\x84\xe4\x6f\x2e\x6a\xf4\x09\x0e\x38\x31\x0e\x48\x8c\xcf\x3d\x9c\x67\xc9\x20\xd2\x78\x84\x47\x8a\xa3\x38\xad\xd0\xac\x54\x4d\x51\xec\x66\x24\x66\x6c\xa7\xa1\xf0\x76\x4d\xc3\x0e\xa3\xa1\x21\x1d\xd3\x59\x4c\x80\xfd\xf0\x52\xc8\x98\x8b\xd7\xb4\x0c\x7f\x3b\xbe\x2c\x79\xf8\x79\xe0\xaf\x6d\x43\x7e\x39\xc6\x2f\x62\xdf\xfb\x5b\xfd\x1f\x85\xb1\xfa\xcf\x1a\x7c\xc9\x89\x9b\x7c\x04\x00\x00\xff\xff\xdf\x32\x77\xe0\xbd\x02\x00\x00")

func dataDesignsLocksJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataDesignsLocksJson,
		"data/designs/locks.json",
	)
}

func dataDesignsLocksJson() (*asset, error) {
	bytes, err := dataDesignsLocksJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/designs/locks.json", size: 701, mode: os.FileMode(420), modTime: time.Unix(1437033599, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/designs/locks.json": dataDesignsLocksJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"designs": &bintree{nil, map[string]*bintree{
			"locks.json": &bintree{dataDesignsLocksJson, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

